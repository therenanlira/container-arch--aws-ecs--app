name: CI/CD Pipeline DEV

on:
  push:
    branches:
      - dev

env:
  AWS_ACCOUNT: "923672208632"
  AWS_REGION: "us-east-1"
  CLUSTER_NAME: "linuxtips-ecscluster"
  APP_NAME: "linuxtips-app"
  REPO_NAME: "linuxtips/$APP_NAME"

jobs:
  ci-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install Go Lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run Go Lint
        run: |
          golangci-lint run ./... -E errcheck
          golangci-lint run ./... -E staticcheck
          golangci-lint run ./... -E govet
        working-directory: ./app

      - name: Run Go Test
        run: go test ./... -v
        working-directory: ./app

  ci-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.7

      - name: Terraform Format Check
        run: terraform fmt -recursive -check
        working-directory: ./terraform

      - name: Terraform Init
        run: terraform init -backend-config="environment/${GITHUB_REF_NAME}/backend.tfvars"
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

  build-publish:
    runs-on: ubuntu-latest
    needs:
      - ci-app
      - ci-terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Build Image
        run: docker build -t ${{ env.APP_NAME }}:latest .
        working-directory: ./app

      - name: Create ECR if not exists
        run: |
          set +e
          REPO_EXISTS=$(aws ecr describe-repositories --repository-names $REPO_NAME 2>&1)

          if [[ $REPO_EXISTS == *"RepositoryNotFoundException"* ]]; then
            aws ecr create-repository --repository-name $REPO_NAME
            test $? -eq 0 || (echo "Failed to create ECR" && exit 1)
          fi

          set -e
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
        working-directory: ./app

      - name: Tag Image
        run: docker tag ${{ env.APP_NAME }}:latest ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPO_NAME }}:${GITHUB_SHA::8}
        working-directory: ./app

      - name: Push Image
        run: docker push ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPO_NAME }}:${GITHUB_SHA::8}
        working-directory: ./app

  terraform-cd:
    runs-on: ubuntu-latest
    needs:
      - build-publish
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.7

      - name: Terraform Init
        run: terraform init -backend-config="environment/${GITHUB_REF_NAME}/backend.tfvars"
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Terraform Plan
        run: terraform plan -var-file="environment/${GITHUB_REF_NAME}/terraform.tfvars" -var="container_image=${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPO_NAME }}:${GITHUB_SHA::8}" -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
